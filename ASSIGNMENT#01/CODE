// Initial empty shopping cart array
let cart = [];

// Function to add items to the cart
const addItemToCart = (productId, productName, quantity, price) => {
  const product = { productId, productName, quantity, price };
  cart.push(product);
  console.log(`${productName} added to the cart!`);
};

// Function to remove an item by productId using splice
const removeItemFromCart = (productId) => {
  const index = cart.findIndex(item => item.productId === productId);
  
  // If productId is found, remove the item using splice
  if (index !== -1) {
    const removedItem = cart.splice(index, 1); // Removes one element at the found index
    console.log(`${removedItem[0].productName} removed from the cart!`);
  } else {
    console.log(`Product with ID ${productId} not found in the cart.`);
  }
};

// Function to update the quantity of an item in the cart using map
const updateItemQuantity = (productId, newQuantity) => {
  let itemFound = false;
  
  cart = cart.map(item => {
    if (item.productId === productId) {
      itemFound = true;
      return { ...item, quantity: newQuantity }; // Update the quantity while keeping other properties the same
    }
    return item;
  });
  
  if (itemFound) {
    console.log(`Quantity updated for product ID ${productId}.`);
  } else {
    console.log(`Product with ID ${productId} not found in the cart.`);
  }
};

// Function to calculate total cost using reduce
const calculateTotalCost = () => {
  const totalCost = cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  console.log(`Total cost of items in the cart: $${totalCost.toFixed(2)}`);
  return totalCost;
};

// Function to display cart summary using map
const displayCartSummary = () => {
  console.log("Cart Summary:");
  cart.forEach(item => {
    const totalPrice = (item.price * item.quantity).toFixed(2);
    console.log(`- ${item.productName}: Quantity: ${item.quantity}, Total Price: $${totalPrice}`);
  });
};

// Function to filter out items with zero quantity
const removeZeroQuantityItems = () => {
  cart = cart.filter(item => item.quantity > 0);
  console.log("Removed items with zero quantity from the cart.");
};

// Function to apply a discount code
const applyDiscount = (discountCode) => {
  // Simple discount logic: code "DISCOUNT10" gives 10% off, "DISCOUNT20" gives 20% off, etc.
  const discountPercentages = {
    'DISCOUNT10': 10,
    'DISCOUNT20': 20,
    'DISCOUNT30': 30,
  };

  const discountPercentage = discountPercentages[discountCode] || 0; // If the code is invalid, no discount is applied
  
  if (discountPercentage > 0) {
    const totalCost = calculateTotalCost();
    const discountAmount = (totalCost * (discountPercentage / 100)).toFixed(2);
    const discountedTotal = (totalCost - discountAmount).toFixed(2);
    
    console.log(`Discount Code Applied: ${discountPercentage}% off!`);
    console.log(`You saved $${discountAmount}.`);
    console.log(`Total after discount: $${discountedTotal}`);
  } else {
    console.log("Invalid discount code.");
  }
};

// Example usage:
addItemToCart(1, "Apple", 3, 1.00);   // Adds 3 apples at $1.00 each
addItemToCart(2, "Banana", 5, 0.50);  // Adds 5 bananas at $0.50 each
addItemToCart(3, "Orange", 2, 1.50);  // Adds 2 oranges at $1.50 each
addItemToCart(4, "Mango", 0, 2.00);   // Adds 0 Mango to simulate a zero quantity item

// Display cart before updates
console.log("Cart before updates:", cart);

// Remove item by productId
removeItemFromCart(2); // Removes Bananas

// Update quantity of an existing product
updateItemQuantity(1, 10);  // Updates the quantity of Apples to 10

// Remove items with zero quantity
removeZeroQuantityItems();  // Removes Mango (quantity = 0)

// Display cart summary
displayCartSummary();  // Display the summary of items with their name, quantity, and total price

// Apply discount code
applyDiscount('DISCOUNT20');  // Apply a 20% discount

